version: '3.9'

services:
  session-publisher:
    build: 
      context: /root/assingment1/session-sub
      dockerfile: Dockerfile
    environment:
      NUM_SESSIONS: 10
      SESSION_DELAY: 10
      AMQP_SERVER: rabbitmq
    depends_on:
      rabbitmq:  # Asegura que RabbitMQ esté disponible antes de iniciar el publicador
        condition: service_healthy

  session-processor:
    build: 
      context: /root/assingment1/session-processor
      dockerfile: Dockerfile
    environment:
      AMQP_SERVER: rabbitmq
      MONGO_SERVER: mongodb
      MONGO_DATABASE: session_data
    depends_on:
      rabbitmq:  # Asegura que RabbitMQ esté disponible antes de iniciar el publicador
        condition: service_healthy
      mongodb:
        condition: service_started  # Verifica que MongoDB haya iniciado

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"  # Puerto del protocolo AMQP
      - "15672:15672"  # Puerto para la interfaz de gestión
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  mongodb:
    image: mongo
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_DATABASE: session_data
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: mypassword
    healthcheck:  # Define un mecanismo de verificación de estado para el contenedor.
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand({ ping: 1 })'"]  # Ejecuta un comando de MongoDB que envía un ping para comprobar si la base de datos está disponible.
      interval: 30s  # Intervalo de tiempo entre cada verificación de estado.
      timeout: 10s  # Tiempo máximo que se espera para que el comando de verificación responda. Aquí es 10 segundos.
      retries: 5  # Número de intentos antes de marcar el servicio como no saludable.

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://mongodb:27017/session_data
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: pass123
    depends_on:
      mongodb:
        condition: service_healthy  # Asegura que mongo-express solo se inicie cuando mongodb esté saludable.

volumes:
  mongo-data:
    driver: local
